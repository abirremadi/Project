{"ast":null,"code":"import Axios from \"axios\";\nimport { PRODUCT_CREATE_FAIL, PRODUCT_CREATE_REQUEST, PRODUCT_CREATE_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_UPDATE_REQUEST, PRODUCT_UPDATE_SUCCESS } from \"../constants/productConstants\";\nexport const listProducts = () => async dispatch => {\n  dispatch({\n    type: PRODUCT_LIST_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get('/api/products');\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const updateProduct = product => async (dispatch, getState) => {\n  dispatch({\n    type: PRODUCT_UPDATE_REQUEST,\n    payload: product\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.put(`/api/products/${product._id}`, product, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: PRODUCT_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: PRODUCT_UPDATE_FAIL,\n      error: message\n    });\n  }\n};\nexport const detailsProduct = productId => async dispatch => {\n  dispatch({\n    type: PRODUCT_DETAILS_REQUEST,\n    payload: productId\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get(`/api/products/${productId}`);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createProduct = () => async (dispatch, getState) => {\n  dispatch({\n    type: PRODUCT_CREATE_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.post('/api/products', {}, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: PRODUCT_CREATE_SUCCESS,\n      payload: data.product\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: PRODUCT_CREATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Pc/Desktop/abir/frontend/src/actions/productActions.js"],"names":["Axios","PRODUCT_CREATE_FAIL","PRODUCT_CREATE_REQUEST","PRODUCT_CREATE_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_UPDATE_REQUEST","PRODUCT_UPDATE_SUCCESS","listProducts","dispatch","type","data","get","payload","error","message","updateProduct","product","getState","userSignin","userInfo","put","_id","headers","Authorization","token","response","PRODUCT_UPDATE_FAIL","detailsProduct","productId","createProduct","post"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport { PRODUCT_CREATE_FAIL, \r\n        PRODUCT_CREATE_REQUEST,\r\n        PRODUCT_CREATE_SUCCESS, \r\n        PRODUCT_DETAILS_FAIL,\r\n        PRODUCT_DETAILS_REQUEST,\r\n        PRODUCT_DETAILS_SUCCESS, \r\n        PRODUCT_LIST_FAIL,\r\n        PRODUCT_LIST_REQUEST,\r\n        PRODUCT_LIST_SUCCESS, \r\n        PRODUCT_UPDATE_REQUEST,\r\n        PRODUCT_UPDATE_SUCCESS} from \"../constants/productConstants\"\r\n\r\nexport const listProducts = () => async(dispatch)=>{\r\n    dispatch({\r\n        type:PRODUCT_LIST_REQUEST\r\n    });\r\n    try{\r\n        const {data}= await Axios.get ('/api/products');\r\n   dispatch({type:PRODUCT_LIST_SUCCESS,payload:data});\r\n    } catch(error){\r\n        dispatch({type:PRODUCT_LIST_FAIL, payload:error.message});\r\n    }\r\n};\r\n\r\nexport const updateProduct = (product) => async (dispatch, getState) => {\r\n  dispatch({ type: PRODUCT_UPDATE_REQUEST, payload: product });\r\n  const {\r\n    userSignin: { userInfo },\r\n  } = getState();\r\n  try {\r\n    const { data } = await Axios.put(`/api/products/${product._id}`, product, {\r\n      headers: { Authorization: `Bearer ${userInfo.token}` },\r\n    });\r\n    dispatch({ type: PRODUCT_UPDATE_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    dispatch({ type: PRODUCT_UPDATE_FAIL, error: message });\r\n  }\r\n};\r\n\r\nexport const detailsProduct = (productId) => async(dispatch)=>{\r\n    dispatch({type:PRODUCT_DETAILS_REQUEST,payload:productId});\r\n    try{\r\n        const {data}=  await Axios.get (`/api/products/${productId}`);\r\n        dispatch({type:PRODUCT_DETAILS_SUCCESS,payload:data});\r\n    } catch(error){\r\n        dispatch({type:PRODUCT_DETAILS_FAIL,\r\n        payload:\r\n         error.response && error.response.data.message\r\n        ?error.response.data.message\r\n        :error.message,\r\n        });\r\n    }\r\n};\r\n\r\nexport const createProduct = () => async (dispatch, getState) => {\r\n    dispatch({ type: PRODUCT_CREATE_REQUEST });\r\n    const {\r\n      userSignin: { userInfo },\r\n    } = getState();\r\n    try {\r\n      const { data } = await Axios.post(\r\n        '/api/products',\r\n        {},\r\n        {\r\n          headers: { Authorization: `Bearer ${userInfo.token}` },\r\n        }\r\n      );\r\n      dispatch({\r\n        type: PRODUCT_CREATE_SUCCESS,\r\n        payload: data.product,\r\n      });\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message;\r\n      dispatch({ type: PRODUCT_CREATE_FAIL, payload: message });\r\n    }\r\n  };"]},"metadata":{},"sourceType":"module"}